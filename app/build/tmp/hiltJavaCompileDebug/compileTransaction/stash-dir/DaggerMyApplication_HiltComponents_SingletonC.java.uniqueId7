// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.middlecourseproject.data.cart.local.dao.CartDao;
import com.example.middlecourseproject.data.cart.repository.CartRepositoryImpl;
import com.example.middlecourseproject.data.checkout.repository.CheckoutRepositoryImpl;
import com.example.middlecourseproject.data.local.datastore.DataStoreManager;
import com.example.middlecourseproject.data.local.roomDB.database.AppDatabase;
import com.example.middlecourseproject.data.local.sharedPreferences.LocaleHelper;
import com.example.middlecourseproject.data.local.sharedPreferences.PreferencesHelper;
import com.example.middlecourseproject.data.repository.AuthRepositoryImpl;
import com.example.middlecourseproject.data.repository.LanguageRepositoryImpl;
import com.example.middlecourseproject.data.repository.TokenRepositoryImpl;
import com.example.middlecourseproject.data.restaurant.api.RestaurantApi;
import com.example.middlecourseproject.data.restaurant.api.RetrofitClient;
import com.example.middlecourseproject.di.DatabaseModule_ProvideAppDatabaseFactory;
import com.example.middlecourseproject.di.DatabaseModule_ProvideCartDaoFactory;
import com.example.middlecourseproject.di.DatabaseModule_ProvideErrorMapperFactory;
import com.example.middlecourseproject.di.FirebaseModule_ProvideFirebaseAuthFactory;
import com.example.middlecourseproject.di.SearchModule_ProvideSearchHelperFactory;
import com.example.middlecourseproject.di.SearchModule_ProvideSearchUseCaseFactory;
import com.example.middlecourseproject.di.SerializationModule_ProvideJsonFactory;
import com.example.middlecourseproject.di.checkout.CheckoutUseCasesModule_ProvideAddPaymentMethodUseCaseFactory;
import com.example.middlecourseproject.di.checkout.CheckoutUseCasesModule_ProvideGetDeliveryAddressUseCaseFactory;
import com.example.middlecourseproject.di.checkout.CheckoutUseCasesModule_ProvideGetPaymentMethodUseCaseFactory;
import com.example.middlecourseproject.di.checkout.CheckoutUseCasesModule_ProvidePlaceOrderUseCaseFactory;
import com.example.middlecourseproject.di.restaurant.AppModule_ProvideNotificationServiceFactory;
import com.example.middlecourseproject.di.restaurant.AppModule_ProvideOrderManagerFactory;
import com.example.middlecourseproject.di.restaurant.AppModule_ProvideRestaurantApiFactory;
import com.example.middlecourseproject.di.restaurant.AppModule_ProvideRestaurantRepositoryFactory;
import com.example.middlecourseproject.domain.cart.usecase.AddToCartUseCase;
import com.example.middlecourseproject.domain.cart.usecase.ClearCartUseCase;
import com.example.middlecourseproject.domain.cart.usecase.GetCartItemCountUseCase;
import com.example.middlecourseproject.domain.cart.usecase.GetCartItemsUseCase;
import com.example.middlecourseproject.domain.cart.usecase.GetCartTotalUseCase;
import com.example.middlecourseproject.domain.cart.usecase.RemoveFromCartUseCase;
import com.example.middlecourseproject.domain.cart.usecase.UpdateCartItemQuantityUseCase;
import com.example.middlecourseproject.domain.checkout.manager.OrderManager;
import com.example.middlecourseproject.domain.checkout.notification.BootReceiver;
import com.example.middlecourseproject.domain.checkout.notification.BootReceiver_MembersInjector;
import com.example.middlecourseproject.domain.checkout.notification.MyFirebaseMessagingService;
import com.example.middlecourseproject.domain.checkout.notification.MyFirebaseMessagingService_MembersInjector;
import com.example.middlecourseproject.domain.checkout.notification.NotificationService;
import com.example.middlecourseproject.domain.checkout.notification.OrderTrackingService;
import com.example.middlecourseproject.domain.checkout.notification.OrderTrackingService_MembersInjector;
import com.example.middlecourseproject.domain.checkout.usecase.AddPaymentMethodUseCase;
import com.example.middlecourseproject.domain.checkout.usecase.GetDeliveryAddressUseCase;
import com.example.middlecourseproject.domain.checkout.usecase.GetPaymentMethodUseCase;
import com.example.middlecourseproject.domain.checkout.usecase.PlaceOrderUseCase;
import com.example.middlecourseproject.domain.restaurant.repository.RestaurantRepository;
import com.example.middlecourseproject.domain.restaurant.usecase.GetAdBannersUseCase;
import com.example.middlecourseproject.domain.restaurant.usecase.GetCategoriesUseCase;
import com.example.middlecourseproject.domain.restaurant.usecase.GetRestaurantByIdUseCase;
import com.example.middlecourseproject.domain.restaurant.usecase.GetRestaurantsByCategoryUseCase;
import com.example.middlecourseproject.domain.search.SearchHelper;
import com.example.middlecourseproject.domain.search.usecase.SearchUseCase;
import com.example.middlecourseproject.domain.session.UserSessionManager;
import com.example.middlecourseproject.domain.theme.ThemeManager;
import com.example.middlecourseproject.domain.useCases.CheckAuthTokenUseCase;
import com.example.middlecourseproject.domain.useCases.GetLanguageUseCase;
import com.example.middlecourseproject.domain.useCases.GetThemeUseCase;
import com.example.middlecourseproject.domain.useCases.LoginUseCase;
import com.example.middlecourseproject.domain.useCases.RegisterUseCase;
import com.example.middlecourseproject.domain.useCases.SignOutUseCase;
import com.example.middlecourseproject.domain.useCases.ThemeToggleUseCase;
import com.example.middlecourseproject.domain.useCases.ToggleLanguageUseCase;
import com.example.middlecourseproject.presentation.auth.logIn.LoginFragment;
import com.example.middlecourseproject.presentation.auth.logIn.LoginViewModel;
import com.example.middlecourseproject.presentation.auth.logIn.LoginViewModel_HiltModules;
import com.example.middlecourseproject.presentation.auth.register.RegisterFragment;
import com.example.middlecourseproject.presentation.auth.register.RegisterViewModel;
import com.example.middlecourseproject.presentation.auth.register.RegisterViewModel_HiltModules;
import com.example.middlecourseproject.presentation.base.MainActivity;
import com.example.middlecourseproject.presentation.base.MainActivity_MembersInjector;
import com.example.middlecourseproject.presentation.cart.fragment.CartFragment;
import com.example.middlecourseproject.presentation.cart.viewmodel.CartViewModel;
import com.example.middlecourseproject.presentation.cart.viewmodel.CartViewModel_HiltModules;
import com.example.middlecourseproject.presentation.checkout.fragment.CheckoutFragment;
import com.example.middlecourseproject.presentation.checkout.fragment.OrderConfirmationFragment;
import com.example.middlecourseproject.presentation.checkout.fragment.OrderConfirmationFragment_MembersInjector;
import com.example.middlecourseproject.presentation.checkout.fragment.PaymentFragment;
import com.example.middlecourseproject.presentation.checkout.viewmodel.CheckoutViewModel;
import com.example.middlecourseproject.presentation.checkout.viewmodel.CheckoutViewModel_HiltModules;
import com.example.middlecourseproject.presentation.checkout.viewmodel.PaymentViewModel;
import com.example.middlecourseproject.presentation.checkout.viewmodel.PaymentViewModel_HiltModules;
import com.example.middlecourseproject.presentation.dish.fragment.DishesFragment;
import com.example.middlecourseproject.presentation.dish.viewmodel.DishesViewModel;
import com.example.middlecourseproject.presentation.dish.viewmodel.DishesViewModel_HiltModules;
import com.example.middlecourseproject.presentation.profile.ProfileFragment;
import com.example.middlecourseproject.presentation.profile.ProfileViewModel;
import com.example.middlecourseproject.presentation.profile.ProfileViewModel_HiltModules;
import com.example.middlecourseproject.presentation.restaurant.fragment.AdDetailFragment;
import com.example.middlecourseproject.presentation.restaurant.fragment.RestaurantFragment;
import com.example.middlecourseproject.presentation.restaurant.fragment.RestaurantFragment_MembersInjector;
import com.example.middlecourseproject.presentation.restaurant.viewmodel.RestaurantViewModel;
import com.example.middlecourseproject.presentation.restaurant.viewmodel.RestaurantViewModel_HiltModules;
import com.example.middlecourseproject.presentation.search.fragment.SearchFragment;
import com.example.middlecourseproject.presentation.search.viewmodel.SearchViewModel;
import com.example.middlecourseproject.presentation.search.viewmodel.SearchViewModel_HiltModules;
import com.example.middlecourseproject.presentation.utils.ErrorMapper;
import com.example.middlecourseproject.presentation.utils.StringProvider;
import com.example.middlecourseproject.presentation.utils.StringProviderImpl;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.firebase.auth.FirebaseAuth;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.managers.SavedStateHandleHolder;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.IdentifierNameString;
import dagger.internal.KeepFieldType;
import dagger.internal.LazyClassKeyMap;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import java.util.Map;
import java.util.Set;
import kotlinx.serialization.json.Json;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DaggerMyApplication_HiltComponents_SingletonC {
  private DaggerMyApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public MyApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private SavedStateHandleHolder savedStateHandleHolder;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ActivityRetainedCBuilder savedStateHandleHolder(
        SavedStateHandleHolder savedStateHandleHolder) {
      this.savedStateHandleHolder = Preconditions.checkNotNull(savedStateHandleHolder);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ActivityRetainedC build() {
      Preconditions.checkBuilderRequirement(savedStateHandleHolder, SavedStateHandleHolder.class);
      return new ActivityRetainedCImpl(singletonCImpl, savedStateHandleHolder);
    }
  }

  private static final class ActivityCBuilder implements MyApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MyApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MyApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MyApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MyApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements MyApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MyApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MyApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectLoginFragment(LoginFragment loginFragment) {
    }

    @Override
    public void injectRegisterFragment(RegisterFragment registerFragment) {
    }

    @Override
    public void injectCartFragment(CartFragment cartFragment) {
    }

    @Override
    public void injectCheckoutFragment(CheckoutFragment checkoutFragment) {
    }

    @Override
    public void injectOrderConfirmationFragment(
        OrderConfirmationFragment orderConfirmationFragment) {
      injectOrderConfirmationFragment2(orderConfirmationFragment);
    }

    @Override
    public void injectPaymentFragment(PaymentFragment paymentFragment) {
    }

    @Override
    public void injectDishesFragment(DishesFragment dishesFragment) {
    }

    @Override
    public void injectProfileFragment(ProfileFragment profileFragment) {
    }

    @Override
    public void injectAdDetailFragment(AdDetailFragment adDetailFragment) {
    }

    @Override
    public void injectRestaurantFragment(RestaurantFragment restaurantFragment) {
      injectRestaurantFragment2(restaurantFragment);
    }

    @Override
    public void injectSearchFragment(SearchFragment searchFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @CanIgnoreReturnValue
    private OrderConfirmationFragment injectOrderConfirmationFragment2(
        OrderConfirmationFragment instance) {
      OrderConfirmationFragment_MembersInjector.injectOrderManager(instance, singletonCImpl.provideOrderManagerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private RestaurantFragment injectRestaurantFragment2(RestaurantFragment instance) {
      RestaurantFragment_MembersInjector.injectOrderManager(instance, singletonCImpl.provideOrderManagerProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends MyApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MyApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    private CheckAuthTokenUseCase checkAuthTokenUseCase() {
      return new CheckAuthTokenUseCase(singletonCImpl.provideFirebaseAuthProvider.get(), singletonCImpl.tokenRepositoryImplProvider.get());
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Map<Class<?>, Boolean> getViewModelKeys() {
      return LazyClassKeyMap.<Boolean>of(ImmutableMap.<String, Boolean>builderWithExpectedSize(9).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_cart_viewmodel_CartViewModel, CartViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_checkout_viewmodel_CheckoutViewModel, CheckoutViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_dish_viewmodel_DishesViewModel, DishesViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_auth_logIn_LoginViewModel, LoginViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_checkout_viewmodel_PaymentViewModel, PaymentViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_profile_ProfileViewModel, ProfileViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_auth_register_RegisterViewModel, RegisterViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_restaurant_viewmodel_RestaurantViewModel, RestaurantViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_search_viewmodel_SearchViewModel, SearchViewModel_HiltModules.KeyModule.provide()).build());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectCheckAuthTokenUseCase(instance, checkAuthTokenUseCase());
      MainActivity_MembersInjector.injectThemeManager(instance, singletonCImpl.themeManagerProvider.get());
      return instance;
    }

    @IdentifierNameString
    private static final class LazyClassKeyProvider {
      static String com_example_middlecourseproject_presentation_search_viewmodel_SearchViewModel = "com.example.middlecourseproject.presentation.search.viewmodel.SearchViewModel";

      static String com_example_middlecourseproject_presentation_restaurant_viewmodel_RestaurantViewModel = "com.example.middlecourseproject.presentation.restaurant.viewmodel.RestaurantViewModel";

      static String com_example_middlecourseproject_presentation_checkout_viewmodel_CheckoutViewModel = "com.example.middlecourseproject.presentation.checkout.viewmodel.CheckoutViewModel";

      static String com_example_middlecourseproject_presentation_auth_register_RegisterViewModel = "com.example.middlecourseproject.presentation.auth.register.RegisterViewModel";

      static String com_example_middlecourseproject_presentation_auth_logIn_LoginViewModel = "com.example.middlecourseproject.presentation.auth.logIn.LoginViewModel";

      static String com_example_middlecourseproject_presentation_profile_ProfileViewModel = "com.example.middlecourseproject.presentation.profile.ProfileViewModel";

      static String com_example_middlecourseproject_presentation_dish_viewmodel_DishesViewModel = "com.example.middlecourseproject.presentation.dish.viewmodel.DishesViewModel";

      static String com_example_middlecourseproject_presentation_cart_viewmodel_CartViewModel = "com.example.middlecourseproject.presentation.cart.viewmodel.CartViewModel";

      static String com_example_middlecourseproject_presentation_checkout_viewmodel_PaymentViewModel = "com.example.middlecourseproject.presentation.checkout.viewmodel.PaymentViewModel";

      @KeepFieldType
      SearchViewModel com_example_middlecourseproject_presentation_search_viewmodel_SearchViewModel2;

      @KeepFieldType
      RestaurantViewModel com_example_middlecourseproject_presentation_restaurant_viewmodel_RestaurantViewModel2;

      @KeepFieldType
      CheckoutViewModel com_example_middlecourseproject_presentation_checkout_viewmodel_CheckoutViewModel2;

      @KeepFieldType
      RegisterViewModel com_example_middlecourseproject_presentation_auth_register_RegisterViewModel2;

      @KeepFieldType
      LoginViewModel com_example_middlecourseproject_presentation_auth_logIn_LoginViewModel2;

      @KeepFieldType
      ProfileViewModel com_example_middlecourseproject_presentation_profile_ProfileViewModel2;

      @KeepFieldType
      DishesViewModel com_example_middlecourseproject_presentation_dish_viewmodel_DishesViewModel2;

      @KeepFieldType
      CartViewModel com_example_middlecourseproject_presentation_cart_viewmodel_CartViewModel2;

      @KeepFieldType
      PaymentViewModel com_example_middlecourseproject_presentation_checkout_viewmodel_PaymentViewModel2;
    }
  }

  private static final class ViewModelCImpl extends MyApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<CartViewModel> cartViewModelProvider;

    private Provider<CheckoutViewModel> checkoutViewModelProvider;

    private Provider<DishesViewModel> dishesViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<PaymentViewModel> paymentViewModelProvider;

    private Provider<ProfileViewModel> profileViewModelProvider;

    private Provider<RegisterViewModel> registerViewModelProvider;

    private Provider<RestaurantViewModel> restaurantViewModelProvider;

    private Provider<SearchViewModel> searchViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    private GetCartItemsUseCase getCartItemsUseCase() {
      return new GetCartItemsUseCase(singletonCImpl.cartRepositoryImplProvider.get());
    }

    private GetCartTotalUseCase getCartTotalUseCase() {
      return new GetCartTotalUseCase(singletonCImpl.cartRepositoryImplProvider.get());
    }

    private UpdateCartItemQuantityUseCase updateCartItemQuantityUseCase() {
      return new UpdateCartItemQuantityUseCase(singletonCImpl.cartRepositoryImplProvider.get());
    }

    private RemoveFromCartUseCase removeFromCartUseCase() {
      return new RemoveFromCartUseCase(singletonCImpl.cartRepositoryImplProvider.get());
    }

    private ClearCartUseCase clearCartUseCase() {
      return new ClearCartUseCase(singletonCImpl.cartRepositoryImplProvider.get());
    }

    private GetRestaurantByIdUseCase getRestaurantByIdUseCase() {
      return new GetRestaurantByIdUseCase(singletonCImpl.provideRestaurantRepositoryProvider.get());
    }

    private AddToCartUseCase addToCartUseCase() {
      return new AddToCartUseCase(singletonCImpl.cartRepositoryImplProvider.get());
    }

    private GetCartItemCountUseCase getCartItemCountUseCase() {
      return new GetCartItemCountUseCase(singletonCImpl.cartRepositoryImplProvider.get());
    }

    private LoginUseCase loginUseCase() {
      return new LoginUseCase(singletonCImpl.authRepositoryImplProvider.get());
    }

    private ToggleLanguageUseCase toggleLanguageUseCase() {
      return new ToggleLanguageUseCase(singletonCImpl.languageRepositoryImplProvider.get());
    }

    private GetLanguageUseCase getLanguageUseCase() {
      return new GetLanguageUseCase(singletonCImpl.languageRepositoryImplProvider.get());
    }

    private SignOutUseCase signOutUseCase() {
      return new SignOutUseCase(singletonCImpl.userSessionManagerProvider.get());
    }

    private ThemeToggleUseCase themeToggleUseCase() {
      return new ThemeToggleUseCase(singletonCImpl.themeManagerProvider.get());
    }

    private GetThemeUseCase getThemeUseCase() {
      return new GetThemeUseCase(singletonCImpl.themeManagerProvider.get());
    }

    private RegisterUseCase registerUseCase() {
      return new RegisterUseCase(singletonCImpl.authRepositoryImplProvider.get());
    }

    private GetCategoriesUseCase getCategoriesUseCase() {
      return new GetCategoriesUseCase(singletonCImpl.provideRestaurantRepositoryProvider.get());
    }

    private GetRestaurantsByCategoryUseCase getRestaurantsByCategoryUseCase() {
      return new GetRestaurantsByCategoryUseCase(singletonCImpl.provideRestaurantRepositoryProvider.get());
    }

    private GetAdBannersUseCase getAdBannersUseCase() {
      return new GetAdBannersUseCase(singletonCImpl.provideRestaurantRepositoryProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.cartViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.checkoutViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.dishesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.paymentViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.profileViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.registerViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.restaurantViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.searchViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
    }

    @Override
    public Map<Class<?>, javax.inject.Provider<ViewModel>> getHiltViewModelMap() {
      return LazyClassKeyMap.<javax.inject.Provider<ViewModel>>of(ImmutableMap.<String, javax.inject.Provider<ViewModel>>builderWithExpectedSize(9).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_cart_viewmodel_CartViewModel, ((Provider) cartViewModelProvider)).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_checkout_viewmodel_CheckoutViewModel, ((Provider) checkoutViewModelProvider)).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_dish_viewmodel_DishesViewModel, ((Provider) dishesViewModelProvider)).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_auth_logIn_LoginViewModel, ((Provider) loginViewModelProvider)).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_checkout_viewmodel_PaymentViewModel, ((Provider) paymentViewModelProvider)).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_profile_ProfileViewModel, ((Provider) profileViewModelProvider)).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_auth_register_RegisterViewModel, ((Provider) registerViewModelProvider)).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_restaurant_viewmodel_RestaurantViewModel, ((Provider) restaurantViewModelProvider)).put(LazyClassKeyProvider.com_example_middlecourseproject_presentation_search_viewmodel_SearchViewModel, ((Provider) searchViewModelProvider)).build());
    }

    @Override
    public Map<Class<?>, Object> getHiltViewModelAssistedMap() {
      return ImmutableMap.<Class<?>, Object>of();
    }

    @IdentifierNameString
    private static final class LazyClassKeyProvider {
      static String com_example_middlecourseproject_presentation_dish_viewmodel_DishesViewModel = "com.example.middlecourseproject.presentation.dish.viewmodel.DishesViewModel";

      static String com_example_middlecourseproject_presentation_profile_ProfileViewModel = "com.example.middlecourseproject.presentation.profile.ProfileViewModel";

      static String com_example_middlecourseproject_presentation_restaurant_viewmodel_RestaurantViewModel = "com.example.middlecourseproject.presentation.restaurant.viewmodel.RestaurantViewModel";

      static String com_example_middlecourseproject_presentation_checkout_viewmodel_CheckoutViewModel = "com.example.middlecourseproject.presentation.checkout.viewmodel.CheckoutViewModel";

      static String com_example_middlecourseproject_presentation_auth_register_RegisterViewModel = "com.example.middlecourseproject.presentation.auth.register.RegisterViewModel";

      static String com_example_middlecourseproject_presentation_search_viewmodel_SearchViewModel = "com.example.middlecourseproject.presentation.search.viewmodel.SearchViewModel";

      static String com_example_middlecourseproject_presentation_checkout_viewmodel_PaymentViewModel = "com.example.middlecourseproject.presentation.checkout.viewmodel.PaymentViewModel";

      static String com_example_middlecourseproject_presentation_auth_logIn_LoginViewModel = "com.example.middlecourseproject.presentation.auth.logIn.LoginViewModel";

      static String com_example_middlecourseproject_presentation_cart_viewmodel_CartViewModel = "com.example.middlecourseproject.presentation.cart.viewmodel.CartViewModel";

      @KeepFieldType
      DishesViewModel com_example_middlecourseproject_presentation_dish_viewmodel_DishesViewModel2;

      @KeepFieldType
      ProfileViewModel com_example_middlecourseproject_presentation_profile_ProfileViewModel2;

      @KeepFieldType
      RestaurantViewModel com_example_middlecourseproject_presentation_restaurant_viewmodel_RestaurantViewModel2;

      @KeepFieldType
      CheckoutViewModel com_example_middlecourseproject_presentation_checkout_viewmodel_CheckoutViewModel2;

      @KeepFieldType
      RegisterViewModel com_example_middlecourseproject_presentation_auth_register_RegisterViewModel2;

      @KeepFieldType
      SearchViewModel com_example_middlecourseproject_presentation_search_viewmodel_SearchViewModel2;

      @KeepFieldType
      PaymentViewModel com_example_middlecourseproject_presentation_checkout_viewmodel_PaymentViewModel2;

      @KeepFieldType
      LoginViewModel com_example_middlecourseproject_presentation_auth_logIn_LoginViewModel2;

      @KeepFieldType
      CartViewModel com_example_middlecourseproject_presentation_cart_viewmodel_CartViewModel2;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.middlecourseproject.presentation.cart.viewmodel.CartViewModel 
          return (T) new CartViewModel(viewModelCImpl.getCartItemsUseCase(), viewModelCImpl.getCartTotalUseCase(), viewModelCImpl.updateCartItemQuantityUseCase(), viewModelCImpl.removeFromCartUseCase(), viewModelCImpl.clearCartUseCase());

          case 1: // com.example.middlecourseproject.presentation.checkout.viewmodel.CheckoutViewModel 
          return (T) new CheckoutViewModel(viewModelCImpl.getCartTotalUseCase(), singletonCImpl.provideGetDeliveryAddressUseCaseProvider.get(), singletonCImpl.provideGetPaymentMethodUseCaseProvider.get(), singletonCImpl.providePlaceOrderUseCaseProvider.get());

          case 2: // com.example.middlecourseproject.presentation.dish.viewmodel.DishesViewModel 
          return (T) new DishesViewModel(viewModelCImpl.getRestaurantByIdUseCase(), viewModelCImpl.addToCartUseCase(), viewModelCImpl.getCartItemCountUseCase());

          case 3: // com.example.middlecourseproject.presentation.auth.logIn.LoginViewModel 
          return (T) new LoginViewModel(viewModelCImpl.loginUseCase(), viewModelCImpl.toggleLanguageUseCase(), viewModelCImpl.getLanguageUseCase(), singletonCImpl.provideErrorMapperProvider.get());

          case 4: // com.example.middlecourseproject.presentation.checkout.viewmodel.PaymentViewModel 
          return (T) new PaymentViewModel(singletonCImpl.provideAddPaymentMethodUseCaseProvider.get());

          case 5: // com.example.middlecourseproject.presentation.profile.ProfileViewModel 
          return (T) new ProfileViewModel(viewModelCImpl.signOutUseCase(), viewModelCImpl.toggleLanguageUseCase(), viewModelCImpl.getLanguageUseCase(), viewModelCImpl.themeToggleUseCase(), viewModelCImpl.getThemeUseCase());

          case 6: // com.example.middlecourseproject.presentation.auth.register.RegisterViewModel 
          return (T) new RegisterViewModel(viewModelCImpl.registerUseCase(), singletonCImpl.provideErrorMapperProvider.get());

          case 7: // com.example.middlecourseproject.presentation.restaurant.viewmodel.RestaurantViewModel 
          return (T) new RestaurantViewModel(viewModelCImpl.getCategoriesUseCase(), viewModelCImpl.getRestaurantsByCategoryUseCase(), viewModelCImpl.getAdBannersUseCase());

          case 8: // com.example.middlecourseproject.presentation.search.viewmodel.SearchViewModel 
          return (T) new SearchViewModel(viewModelCImpl.getRestaurantsByCategoryUseCase(), singletonCImpl.provideSearchUseCaseProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MyApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl,
        SavedStateHandleHolder savedStateHandleHolderParam) {
      this.singletonCImpl = singletonCImpl;

      initialize(savedStateHandleHolderParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandleHolder savedStateHandleHolderParam) {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MyApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }

    @Override
    public void injectMyFirebaseMessagingService(
        MyFirebaseMessagingService myFirebaseMessagingService) {
      injectMyFirebaseMessagingService2(myFirebaseMessagingService);
    }

    @Override
    public void injectOrderTrackingService(OrderTrackingService orderTrackingService) {
      injectOrderTrackingService2(orderTrackingService);
    }

    @CanIgnoreReturnValue
    private MyFirebaseMessagingService injectMyFirebaseMessagingService2(
        MyFirebaseMessagingService instance) {
      MyFirebaseMessagingService_MembersInjector.injectNotificationService(instance, singletonCImpl.provideNotificationServiceProvider.get());
      MyFirebaseMessagingService_MembersInjector.injectOrderManager(instance, singletonCImpl.provideOrderManagerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private OrderTrackingService injectOrderTrackingService2(OrderTrackingService instance) {
      OrderTrackingService_MembersInjector.injectOrderManager(instance, singletonCImpl.provideOrderManagerProvider.get());
      return instance;
    }
  }

  private static final class SingletonCImpl extends MyApplication_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<PreferencesHelper> preferencesHelperProvider;

    private Provider<ThemeManager> themeManagerProvider;

    private Provider<LocaleHelper> localeHelperProvider;

    private Provider<NotificationService> provideNotificationServiceProvider;

    private Provider<OrderManager> provideOrderManagerProvider;

    private Provider<FirebaseAuth> provideFirebaseAuthProvider;

    private Provider<TokenRepositoryImpl> tokenRepositoryImplProvider;

    private Provider<AppDatabase> provideAppDatabaseProvider;

    private Provider<CartRepositoryImpl> cartRepositoryImplProvider;

    private Provider<Json> provideJsonProvider;

    private Provider<CheckoutRepositoryImpl> checkoutRepositoryImplProvider;

    private Provider<GetDeliveryAddressUseCase> provideGetDeliveryAddressUseCaseProvider;

    private Provider<GetPaymentMethodUseCase> provideGetPaymentMethodUseCaseProvider;

    private Provider<PlaceOrderUseCase> providePlaceOrderUseCaseProvider;

    private Provider<RetrofitClient> retrofitClientProvider;

    private Provider<RestaurantApi> provideRestaurantApiProvider;

    private Provider<RestaurantRepository> provideRestaurantRepositoryProvider;

    private Provider<AuthRepositoryImpl> authRepositoryImplProvider;

    private Provider<LanguageRepositoryImpl> languageRepositoryImplProvider;

    private Provider<StringProviderImpl> stringProviderImplProvider;

    private Provider<StringProvider> bindStringProvider;

    private Provider<ErrorMapper> provideErrorMapperProvider;

    private Provider<AddPaymentMethodUseCase> provideAddPaymentMethodUseCaseProvider;

    private Provider<UserSessionManager> userSessionManagerProvider;

    private Provider<SearchHelper> provideSearchHelperProvider;

    private Provider<SearchUseCase> provideSearchUseCaseProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    private DataStoreManager dataStoreManager() {
      return new DataStoreManager(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
    }

    private CartDao cartDao() {
      return DatabaseModule_ProvideCartDaoFactory.provideCartDao(provideAppDatabaseProvider.get());
    }

    private ClearCartUseCase clearCartUseCase() {
      return new ClearCartUseCase(cartRepositoryImplProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.preferencesHelperProvider = DoubleCheck.provider(new SwitchingProvider<PreferencesHelper>(singletonCImpl, 1));
      this.themeManagerProvider = DoubleCheck.provider(new SwitchingProvider<ThemeManager>(singletonCImpl, 0));
      this.localeHelperProvider = DoubleCheck.provider(new SwitchingProvider<LocaleHelper>(singletonCImpl, 2));
      this.provideNotificationServiceProvider = DoubleCheck.provider(new SwitchingProvider<NotificationService>(singletonCImpl, 4));
      this.provideOrderManagerProvider = DoubleCheck.provider(new SwitchingProvider<OrderManager>(singletonCImpl, 3));
      this.provideFirebaseAuthProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseAuth>(singletonCImpl, 5));
      this.tokenRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider<TokenRepositoryImpl>(singletonCImpl, 6));
      this.provideAppDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonCImpl, 8));
      this.cartRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider<CartRepositoryImpl>(singletonCImpl, 7));
      this.provideJsonProvider = DoubleCheck.provider(new SwitchingProvider<Json>(singletonCImpl, 11));
      this.checkoutRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider<CheckoutRepositoryImpl>(singletonCImpl, 10));
      this.provideGetDeliveryAddressUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetDeliveryAddressUseCase>(singletonCImpl, 9));
      this.provideGetPaymentMethodUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetPaymentMethodUseCase>(singletonCImpl, 12));
      this.providePlaceOrderUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<PlaceOrderUseCase>(singletonCImpl, 13));
      this.retrofitClientProvider = DoubleCheck.provider(new SwitchingProvider<RetrofitClient>(singletonCImpl, 16));
      this.provideRestaurantApiProvider = DoubleCheck.provider(new SwitchingProvider<RestaurantApi>(singletonCImpl, 15));
      this.provideRestaurantRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<RestaurantRepository>(singletonCImpl, 14));
      this.authRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider<AuthRepositoryImpl>(singletonCImpl, 17));
      this.languageRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider<LanguageRepositoryImpl>(singletonCImpl, 18));
      this.stringProviderImplProvider = new SwitchingProvider<>(singletonCImpl, 20);
      this.bindStringProvider = DoubleCheck.provider((Provider) stringProviderImplProvider);
      this.provideErrorMapperProvider = DoubleCheck.provider(new SwitchingProvider<ErrorMapper>(singletonCImpl, 19));
      this.provideAddPaymentMethodUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<AddPaymentMethodUseCase>(singletonCImpl, 21));
      this.userSessionManagerProvider = DoubleCheck.provider(new SwitchingProvider<UserSessionManager>(singletonCImpl, 22));
      this.provideSearchHelperProvider = DoubleCheck.provider(new SwitchingProvider<SearchHelper>(singletonCImpl, 24));
      this.provideSearchUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<SearchUseCase>(singletonCImpl, 23));
    }

    @Override
    public void injectMyApplication(MyApplication myApplication) {
      injectMyApplication2(myApplication);
    }

    @Override
    public PreferencesHelper preferencesHelper() {
      return preferencesHelperProvider.get();
    }

    @Override
    public LocaleHelper localeHelper() {
      return localeHelperProvider.get();
    }

    @Override
    public void injectBootReceiver(BootReceiver bootReceiver) {
      injectBootReceiver2(bootReceiver);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return ImmutableSet.<Boolean>of();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @CanIgnoreReturnValue
    private MyApplication injectMyApplication2(MyApplication instance) {
      MyApplication_MembersInjector.injectThemeManager(instance, themeManagerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private BootReceiver injectBootReceiver2(BootReceiver instance) {
      BootReceiver_MembersInjector.injectOrderManager(instance, provideOrderManagerProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.middlecourseproject.domain.theme.ThemeManager 
          return (T) new ThemeManager(singletonCImpl.preferencesHelperProvider.get());

          case 1: // com.example.middlecourseproject.data.local.sharedPreferences.PreferencesHelper 
          return (T) new PreferencesHelper(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 2: // com.example.middlecourseproject.data.local.sharedPreferences.LocaleHelper 
          return (T) new LocaleHelper(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 3: // com.example.middlecourseproject.domain.checkout.manager.OrderManager 
          return (T) AppModule_ProvideOrderManagerFactory.provideOrderManager(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.provideNotificationServiceProvider.get());

          case 4: // com.example.middlecourseproject.domain.checkout.notification.NotificationService 
          return (T) AppModule_ProvideNotificationServiceFactory.provideNotificationService(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 5: // com.google.firebase.auth.FirebaseAuth 
          return (T) FirebaseModule_ProvideFirebaseAuthFactory.provideFirebaseAuth();

          case 6: // com.example.middlecourseproject.data.repository.TokenRepositoryImpl 
          return (T) new TokenRepositoryImpl(singletonCImpl.dataStoreManager());

          case 7: // com.example.middlecourseproject.data.cart.repository.CartRepositoryImpl 
          return (T) new CartRepositoryImpl(singletonCImpl.cartDao());

          case 8: // com.example.middlecourseproject.data.local.roomDB.database.AppDatabase 
          return (T) DatabaseModule_ProvideAppDatabaseFactory.provideAppDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 9: // com.example.middlecourseproject.domain.checkout.usecase.GetDeliveryAddressUseCase 
          return (T) CheckoutUseCasesModule_ProvideGetDeliveryAddressUseCaseFactory.provideGetDeliveryAddressUseCase(singletonCImpl.checkoutRepositoryImplProvider.get());

          case 10: // com.example.middlecourseproject.data.checkout.repository.CheckoutRepositoryImpl 
          return (T) new CheckoutRepositoryImpl(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.cartRepositoryImplProvider.get(), singletonCImpl.provideJsonProvider.get());

          case 11: // kotlinx.serialization.json.Json 
          return (T) SerializationModule_ProvideJsonFactory.provideJson();

          case 12: // com.example.middlecourseproject.domain.checkout.usecase.GetPaymentMethodUseCase 
          return (T) CheckoutUseCasesModule_ProvideGetPaymentMethodUseCaseFactory.provideGetPaymentMethodUseCase(singletonCImpl.checkoutRepositoryImplProvider.get());

          case 13: // com.example.middlecourseproject.domain.checkout.usecase.PlaceOrderUseCase 
          return (T) CheckoutUseCasesModule_ProvidePlaceOrderUseCaseFactory.providePlaceOrderUseCase(singletonCImpl.checkoutRepositoryImplProvider.get(), singletonCImpl.clearCartUseCase());

          case 14: // com.example.middlecourseproject.domain.restaurant.repository.RestaurantRepository 
          return (T) AppModule_ProvideRestaurantRepositoryFactory.provideRestaurantRepository(singletonCImpl.provideRestaurantApiProvider.get());

          case 15: // com.example.middlecourseproject.data.restaurant.api.RestaurantApi 
          return (T) AppModule_ProvideRestaurantApiFactory.provideRestaurantApi(singletonCImpl.retrofitClientProvider.get());

          case 16: // com.example.middlecourseproject.data.restaurant.api.RetrofitClient 
          return (T) new RetrofitClient();

          case 17: // com.example.middlecourseproject.data.repository.AuthRepositoryImpl 
          return (T) new AuthRepositoryImpl(singletonCImpl.provideFirebaseAuthProvider.get(), singletonCImpl.tokenRepositoryImplProvider.get());

          case 18: // com.example.middlecourseproject.data.repository.LanguageRepositoryImpl 
          return (T) new LanguageRepositoryImpl(singletonCImpl.preferencesHelperProvider.get(), singletonCImpl.localeHelperProvider.get());

          case 19: // com.example.middlecourseproject.presentation.utils.ErrorMapper 
          return (T) DatabaseModule_ProvideErrorMapperFactory.provideErrorMapper(singletonCImpl.bindStringProvider.get());

          case 20: // com.example.middlecourseproject.presentation.utils.StringProviderImpl 
          return (T) new StringProviderImpl(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.preferencesHelperProvider.get());

          case 21: // com.example.middlecourseproject.domain.checkout.usecase.AddPaymentMethodUseCase 
          return (T) CheckoutUseCasesModule_ProvideAddPaymentMethodUseCaseFactory.provideAddPaymentMethodUseCase(singletonCImpl.checkoutRepositoryImplProvider.get());

          case 22: // com.example.middlecourseproject.domain.session.UserSessionManager 
          return (T) new UserSessionManager(singletonCImpl.provideFirebaseAuthProvider.get(), singletonCImpl.tokenRepositoryImplProvider.get());

          case 23: // com.example.middlecourseproject.domain.search.usecase.SearchUseCase 
          return (T) SearchModule_ProvideSearchUseCaseFactory.provideSearchUseCase(singletonCImpl.provideRestaurantRepositoryProvider.get(), singletonCImpl.provideSearchHelperProvider.get());

          case 24: // com.example.middlecourseproject.domain.search.SearchHelper 
          return (T) SearchModule_ProvideSearchHelperFactory.provideSearchHelper();

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
