// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.di;

import com.example.middlecourseproject.presentation.utils.ErrorMapper;
import com.example.middlecourseproject.presentation.utils.StringProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DatabaseModule_ProvideErrorMapperFactory implements Factory<ErrorMapper> {
  private final Provider<StringProvider> stringProvider;

  public DatabaseModule_ProvideErrorMapperFactory(Provider<StringProvider> stringProvider) {
    this.stringProvider = stringProvider;
  }

  @Override
  public ErrorMapper get() {
    return provideErrorMapper(stringProvider.get());
  }

  public static DatabaseModule_ProvideErrorMapperFactory create(
      Provider<StringProvider> stringProvider) {
    return new DatabaseModule_ProvideErrorMapperFactory(stringProvider);
  }

  public static ErrorMapper provideErrorMapper(StringProvider stringProvider) {
    return Preconditions.checkNotNullFromProvides(DatabaseModule.INSTANCE.provideErrorMapper(stringProvider));
  }
}
