// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class BaseNetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> loggingProvider;

  public BaseNetworkModule_ProvideOkHttpClientFactory(
      Provider<HttpLoggingInterceptor> loggingProvider) {
    this.loggingProvider = loggingProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(loggingProvider.get());
  }

  public static BaseNetworkModule_ProvideOkHttpClientFactory create(
      Provider<HttpLoggingInterceptor> loggingProvider) {
    return new BaseNetworkModule_ProvideOkHttpClientFactory(loggingProvider);
  }

  public static OkHttpClient provideOkHttpClient(HttpLoggingInterceptor logging) {
    return Preconditions.checkNotNullFromProvides(BaseNetworkModule.INSTANCE.provideOkHttpClient(logging));
  }
}
