// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.presentation.cart.viewmodel;

import com.example.middlecourseproject.domain.cart.usecase.ClearCartUseCase;
import com.example.middlecourseproject.domain.cart.usecase.GetCartItemsUseCase;
import com.example.middlecourseproject.domain.cart.usecase.GetCartTotalUseCase;
import com.example.middlecourseproject.domain.cart.usecase.RemoveFromCartUseCase;
import com.example.middlecourseproject.domain.cart.usecase.UpdateCartItemQuantityUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class CartViewModel_Factory implements Factory<CartViewModel> {
  private final Provider<GetCartItemsUseCase> getCartItemsUseCaseProvider;

  private final Provider<GetCartTotalUseCase> getCartTotalUseCaseProvider;

  private final Provider<UpdateCartItemQuantityUseCase> updateCartItemQuantityUseCaseProvider;

  private final Provider<RemoveFromCartUseCase> removeFromCartUseCaseProvider;

  private final Provider<ClearCartUseCase> clearCartUseCaseProvider;

  public CartViewModel_Factory(Provider<GetCartItemsUseCase> getCartItemsUseCaseProvider,
      Provider<GetCartTotalUseCase> getCartTotalUseCaseProvider,
      Provider<UpdateCartItemQuantityUseCase> updateCartItemQuantityUseCaseProvider,
      Provider<RemoveFromCartUseCase> removeFromCartUseCaseProvider,
      Provider<ClearCartUseCase> clearCartUseCaseProvider) {
    this.getCartItemsUseCaseProvider = getCartItemsUseCaseProvider;
    this.getCartTotalUseCaseProvider = getCartTotalUseCaseProvider;
    this.updateCartItemQuantityUseCaseProvider = updateCartItemQuantityUseCaseProvider;
    this.removeFromCartUseCaseProvider = removeFromCartUseCaseProvider;
    this.clearCartUseCaseProvider = clearCartUseCaseProvider;
  }

  @Override
  public CartViewModel get() {
    return newInstance(getCartItemsUseCaseProvider.get(), getCartTotalUseCaseProvider.get(), updateCartItemQuantityUseCaseProvider.get(), removeFromCartUseCaseProvider.get(), clearCartUseCaseProvider.get());
  }

  public static CartViewModel_Factory create(
      Provider<GetCartItemsUseCase> getCartItemsUseCaseProvider,
      Provider<GetCartTotalUseCase> getCartTotalUseCaseProvider,
      Provider<UpdateCartItemQuantityUseCase> updateCartItemQuantityUseCaseProvider,
      Provider<RemoveFromCartUseCase> removeFromCartUseCaseProvider,
      Provider<ClearCartUseCase> clearCartUseCaseProvider) {
    return new CartViewModel_Factory(getCartItemsUseCaseProvider, getCartTotalUseCaseProvider, updateCartItemQuantityUseCaseProvider, removeFromCartUseCaseProvider, clearCartUseCaseProvider);
  }

  public static CartViewModel newInstance(GetCartItemsUseCase getCartItemsUseCase,
      GetCartTotalUseCase getCartTotalUseCase,
      UpdateCartItemQuantityUseCase updateCartItemQuantityUseCase,
      RemoveFromCartUseCase removeFromCartUseCase, ClearCartUseCase clearCartUseCase) {
    return new CartViewModel(getCartItemsUseCase, getCartTotalUseCase, updateCartItemQuantityUseCase, removeFromCartUseCase, clearCartUseCase);
  }
}
