// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.domain.checkout.usecase;

import com.example.middlecourseproject.domain.checkout.repository.CheckoutRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class GetDeliveryAddressUseCase_Factory implements Factory<GetDeliveryAddressUseCase> {
  private final Provider<CheckoutRepository> checkoutRepositoryProvider;

  public GetDeliveryAddressUseCase_Factory(
      Provider<CheckoutRepository> checkoutRepositoryProvider) {
    this.checkoutRepositoryProvider = checkoutRepositoryProvider;
  }

  @Override
  public GetDeliveryAddressUseCase get() {
    return newInstance(checkoutRepositoryProvider.get());
  }

  public static GetDeliveryAddressUseCase_Factory create(
      Provider<CheckoutRepository> checkoutRepositoryProvider) {
    return new GetDeliveryAddressUseCase_Factory(checkoutRepositoryProvider);
  }

  public static GetDeliveryAddressUseCase newInstance(CheckoutRepository checkoutRepository) {
    return new GetDeliveryAddressUseCase(checkoutRepository);
  }
}
