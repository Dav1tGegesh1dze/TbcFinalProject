// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.presentation.base;

import com.example.middlecourseproject.domain.theme.ThemeManager;
import com.example.middlecourseproject.domain.useCases.CheckAuthTokenUseCase;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<CheckAuthTokenUseCase> checkAuthTokenUseCaseProvider;

  private final Provider<ThemeManager> themeManagerProvider;

  public MainActivity_MembersInjector(Provider<CheckAuthTokenUseCase> checkAuthTokenUseCaseProvider,
      Provider<ThemeManager> themeManagerProvider) {
    this.checkAuthTokenUseCaseProvider = checkAuthTokenUseCaseProvider;
    this.themeManagerProvider = themeManagerProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<CheckAuthTokenUseCase> checkAuthTokenUseCaseProvider,
      Provider<ThemeManager> themeManagerProvider) {
    return new MainActivity_MembersInjector(checkAuthTokenUseCaseProvider, themeManagerProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    injectCheckAuthTokenUseCase(instance, checkAuthTokenUseCaseProvider.get());
    injectThemeManager(instance, themeManagerProvider.get());
  }

  @InjectedFieldSignature("com.example.middlecourseproject.presentation.base.MainActivity.checkAuthTokenUseCase")
  public static void injectCheckAuthTokenUseCase(MainActivity instance,
      CheckAuthTokenUseCase checkAuthTokenUseCase) {
    instance.checkAuthTokenUseCase = checkAuthTokenUseCase;
  }

  @InjectedFieldSignature("com.example.middlecourseproject.presentation.base.MainActivity.themeManager")
  public static void injectThemeManager(MainActivity instance, ThemeManager themeManager) {
    instance.themeManager = themeManager;
  }
}
