// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.domain.search.usecase;

import com.example.middlecourseproject.domain.restaurant.repository.RestaurantRepository;
import com.example.middlecourseproject.domain.search.SearchHelper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class SearchUseCase_Factory implements Factory<SearchUseCase> {
  private final Provider<RestaurantRepository> restaurantRepositoryProvider;

  private final Provider<SearchHelper> searchHelperProvider;

  public SearchUseCase_Factory(Provider<RestaurantRepository> restaurantRepositoryProvider,
      Provider<SearchHelper> searchHelperProvider) {
    this.restaurantRepositoryProvider = restaurantRepositoryProvider;
    this.searchHelperProvider = searchHelperProvider;
  }

  @Override
  public SearchUseCase get() {
    return newInstance(restaurantRepositoryProvider.get(), searchHelperProvider.get());
  }

  public static SearchUseCase_Factory create(
      Provider<RestaurantRepository> restaurantRepositoryProvider,
      Provider<SearchHelper> searchHelperProvider) {
    return new SearchUseCase_Factory(restaurantRepositoryProvider, searchHelperProvider);
  }

  public static SearchUseCase newInstance(RestaurantRepository restaurantRepository,
      SearchHelper searchHelper) {
    return new SearchUseCase(restaurantRepository, searchHelper);
  }
}
