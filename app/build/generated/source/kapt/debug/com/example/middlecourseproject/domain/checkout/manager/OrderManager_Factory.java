// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.domain.checkout.manager;

import android.content.Context;
import com.example.middlecourseproject.domain.checkout.notification.NotificationService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class OrderManager_Factory implements Factory<OrderManager> {
  private final Provider<Context> contextProvider;

  private final Provider<NotificationService> notificationServiceProvider;

  public OrderManager_Factory(Provider<Context> contextProvider,
      Provider<NotificationService> notificationServiceProvider) {
    this.contextProvider = contextProvider;
    this.notificationServiceProvider = notificationServiceProvider;
  }

  @Override
  public OrderManager get() {
    return newInstance(contextProvider.get(), notificationServiceProvider.get());
  }

  public static OrderManager_Factory create(Provider<Context> contextProvider,
      Provider<NotificationService> notificationServiceProvider) {
    return new OrderManager_Factory(contextProvider, notificationServiceProvider);
  }

  public static OrderManager newInstance(Context context, NotificationService notificationService) {
    return new OrderManager(context, notificationService);
  }
}
