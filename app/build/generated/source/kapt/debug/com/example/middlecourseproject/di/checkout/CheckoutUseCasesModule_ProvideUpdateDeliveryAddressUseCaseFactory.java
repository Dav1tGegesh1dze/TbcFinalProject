// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.di.checkout;

import com.example.middlecourseproject.domain.checkout.repository.CheckoutRepository;
import com.example.middlecourseproject.domain.checkout.usecase.UpdateDeliveryAddressUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class CheckoutUseCasesModule_ProvideUpdateDeliveryAddressUseCaseFactory implements Factory<UpdateDeliveryAddressUseCase> {
  private final Provider<CheckoutRepository> checkoutRepositoryProvider;

  public CheckoutUseCasesModule_ProvideUpdateDeliveryAddressUseCaseFactory(
      Provider<CheckoutRepository> checkoutRepositoryProvider) {
    this.checkoutRepositoryProvider = checkoutRepositoryProvider;
  }

  @Override
  public UpdateDeliveryAddressUseCase get() {
    return provideUpdateDeliveryAddressUseCase(checkoutRepositoryProvider.get());
  }

  public static CheckoutUseCasesModule_ProvideUpdateDeliveryAddressUseCaseFactory create(
      Provider<CheckoutRepository> checkoutRepositoryProvider) {
    return new CheckoutUseCasesModule_ProvideUpdateDeliveryAddressUseCaseFactory(checkoutRepositoryProvider);
  }

  public static UpdateDeliveryAddressUseCase provideUpdateDeliveryAddressUseCase(
      CheckoutRepository checkoutRepository) {
    return Preconditions.checkNotNullFromProvides(CheckoutUseCasesModule.INSTANCE.provideUpdateDeliveryAddressUseCase(checkoutRepository));
  }
}
