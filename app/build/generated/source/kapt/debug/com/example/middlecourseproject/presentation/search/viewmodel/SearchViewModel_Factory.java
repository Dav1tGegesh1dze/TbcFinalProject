// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.presentation.search.viewmodel;

import com.example.middlecourseproject.domain.restaurant.usecase.GetRestaurantsByCategoryUseCase;
import com.example.middlecourseproject.domain.search.usecase.SearchUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class SearchViewModel_Factory implements Factory<SearchViewModel> {
  private final Provider<GetRestaurantsByCategoryUseCase> getRestaurantsByCategoryUseCaseProvider;

  private final Provider<SearchUseCase> searchUseCaseProvider;

  public SearchViewModel_Factory(
      Provider<GetRestaurantsByCategoryUseCase> getRestaurantsByCategoryUseCaseProvider,
      Provider<SearchUseCase> searchUseCaseProvider) {
    this.getRestaurantsByCategoryUseCaseProvider = getRestaurantsByCategoryUseCaseProvider;
    this.searchUseCaseProvider = searchUseCaseProvider;
  }

  @Override
  public SearchViewModel get() {
    return newInstance(getRestaurantsByCategoryUseCaseProvider.get(), searchUseCaseProvider.get());
  }

  public static SearchViewModel_Factory create(
      Provider<GetRestaurantsByCategoryUseCase> getRestaurantsByCategoryUseCaseProvider,
      Provider<SearchUseCase> searchUseCaseProvider) {
    return new SearchViewModel_Factory(getRestaurantsByCategoryUseCaseProvider, searchUseCaseProvider);
  }

  public static SearchViewModel newInstance(
      GetRestaurantsByCategoryUseCase getRestaurantsByCategoryUseCase,
      SearchUseCase searchUseCase) {
    return new SearchViewModel(getRestaurantsByCategoryUseCase, searchUseCase);
  }
}
