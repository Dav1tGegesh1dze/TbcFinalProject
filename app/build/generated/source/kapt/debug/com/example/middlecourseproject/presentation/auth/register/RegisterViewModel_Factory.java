// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.presentation.auth.register;

import com.example.middlecourseproject.domain.useCases.RegisterUseCase;
import com.example.middlecourseproject.presentation.utils.ErrorMapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class RegisterViewModel_Factory implements Factory<RegisterViewModel> {
  private final Provider<RegisterUseCase> registerUseCaseProvider;

  private final Provider<ErrorMapper> errorMapperProvider;

  public RegisterViewModel_Factory(Provider<RegisterUseCase> registerUseCaseProvider,
      Provider<ErrorMapper> errorMapperProvider) {
    this.registerUseCaseProvider = registerUseCaseProvider;
    this.errorMapperProvider = errorMapperProvider;
  }

  @Override
  public RegisterViewModel get() {
    return newInstance(registerUseCaseProvider.get(), errorMapperProvider.get());
  }

  public static RegisterViewModel_Factory create(Provider<RegisterUseCase> registerUseCaseProvider,
      Provider<ErrorMapper> errorMapperProvider) {
    return new RegisterViewModel_Factory(registerUseCaseProvider, errorMapperProvider);
  }

  public static RegisterViewModel newInstance(RegisterUseCase registerUseCase,
      ErrorMapper errorMapper) {
    return new RegisterViewModel(registerUseCase, errorMapper);
  }
}
