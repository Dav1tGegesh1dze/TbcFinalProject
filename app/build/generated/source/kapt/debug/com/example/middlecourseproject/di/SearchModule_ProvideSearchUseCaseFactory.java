// Generated by Dagger (https://dagger.dev).
package com.example.middlecourseproject.di;

import com.example.middlecourseproject.domain.restaurant.repository.RestaurantRepository;
import com.example.middlecourseproject.domain.search.SearchHelper;
import com.example.middlecourseproject.domain.search.usecase.SearchUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class SearchModule_ProvideSearchUseCaseFactory implements Factory<SearchUseCase> {
  private final Provider<RestaurantRepository> restaurantRepositoryProvider;

  private final Provider<SearchHelper> searchHelperProvider;

  public SearchModule_ProvideSearchUseCaseFactory(
      Provider<RestaurantRepository> restaurantRepositoryProvider,
      Provider<SearchHelper> searchHelperProvider) {
    this.restaurantRepositoryProvider = restaurantRepositoryProvider;
    this.searchHelperProvider = searchHelperProvider;
  }

  @Override
  public SearchUseCase get() {
    return provideSearchUseCase(restaurantRepositoryProvider.get(), searchHelperProvider.get());
  }

  public static SearchModule_ProvideSearchUseCaseFactory create(
      Provider<RestaurantRepository> restaurantRepositoryProvider,
      Provider<SearchHelper> searchHelperProvider) {
    return new SearchModule_ProvideSearchUseCaseFactory(restaurantRepositoryProvider, searchHelperProvider);
  }

  public static SearchUseCase provideSearchUseCase(RestaurantRepository restaurantRepository,
      SearchHelper searchHelper) {
    return Preconditions.checkNotNullFromProvides(SearchModule.INSTANCE.provideSearchUseCase(restaurantRepository, searchHelper));
  }
}
