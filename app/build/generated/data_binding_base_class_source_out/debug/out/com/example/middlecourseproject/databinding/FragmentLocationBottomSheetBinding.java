// Generated by view binder compiler. Do not edit!
package com.example.middlecourseproject.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.middlecourseproject.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentLocationBottomSheetBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout btnAddNewAddress;

  @NonNull
  public final ConstraintLayout btnBrowseAllCities;

  @NonNull
  public final ImageButton btnClose;

  @NonNull
  public final ConstraintLayout btnMyAddresses;

  @NonNull
  public final ConstraintLayout btnUseCurrentLocation;

  @NonNull
  public final View handle;

  @NonNull
  public final ImageView iconAdd;

  @NonNull
  public final ImageView iconAddresses;

  @NonNull
  public final ImageView iconCheck;

  @NonNull
  public final ImageView iconCities;

  @NonNull
  public final ImageView iconCurrentLocation;

  @NonNull
  public final ImageView iconHome;

  @NonNull
  public final ConstraintLayout selectedAddressContainer;

  @NonNull
  public final TextView tvCityName;

  @NonNull
  public final TextView tvCoordinates;

  @NonNull
  public final TextView tvLocation;

  private FragmentLocationBottomSheetBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout btnAddNewAddress, @NonNull ConstraintLayout btnBrowseAllCities,
      @NonNull ImageButton btnClose, @NonNull ConstraintLayout btnMyAddresses,
      @NonNull ConstraintLayout btnUseCurrentLocation, @NonNull View handle,
      @NonNull ImageView iconAdd, @NonNull ImageView iconAddresses, @NonNull ImageView iconCheck,
      @NonNull ImageView iconCities, @NonNull ImageView iconCurrentLocation,
      @NonNull ImageView iconHome, @NonNull ConstraintLayout selectedAddressContainer,
      @NonNull TextView tvCityName, @NonNull TextView tvCoordinates, @NonNull TextView tvLocation) {
    this.rootView = rootView;
    this.btnAddNewAddress = btnAddNewAddress;
    this.btnBrowseAllCities = btnBrowseAllCities;
    this.btnClose = btnClose;
    this.btnMyAddresses = btnMyAddresses;
    this.btnUseCurrentLocation = btnUseCurrentLocation;
    this.handle = handle;
    this.iconAdd = iconAdd;
    this.iconAddresses = iconAddresses;
    this.iconCheck = iconCheck;
    this.iconCities = iconCities;
    this.iconCurrentLocation = iconCurrentLocation;
    this.iconHome = iconHome;
    this.selectedAddressContainer = selectedAddressContainer;
    this.tvCityName = tvCityName;
    this.tvCoordinates = tvCoordinates;
    this.tvLocation = tvLocation;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLocationBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLocationBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_location_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLocationBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAddNewAddress;
      ConstraintLayout btnAddNewAddress = ViewBindings.findChildViewById(rootView, id);
      if (btnAddNewAddress == null) {
        break missingId;
      }

      id = R.id.btnBrowseAllCities;
      ConstraintLayout btnBrowseAllCities = ViewBindings.findChildViewById(rootView, id);
      if (btnBrowseAllCities == null) {
        break missingId;
      }

      id = R.id.btnClose;
      ImageButton btnClose = ViewBindings.findChildViewById(rootView, id);
      if (btnClose == null) {
        break missingId;
      }

      id = R.id.btnMyAddresses;
      ConstraintLayout btnMyAddresses = ViewBindings.findChildViewById(rootView, id);
      if (btnMyAddresses == null) {
        break missingId;
      }

      id = R.id.btnUseCurrentLocation;
      ConstraintLayout btnUseCurrentLocation = ViewBindings.findChildViewById(rootView, id);
      if (btnUseCurrentLocation == null) {
        break missingId;
      }

      id = R.id.handle;
      View handle = ViewBindings.findChildViewById(rootView, id);
      if (handle == null) {
        break missingId;
      }

      id = R.id.iconAdd;
      ImageView iconAdd = ViewBindings.findChildViewById(rootView, id);
      if (iconAdd == null) {
        break missingId;
      }

      id = R.id.iconAddresses;
      ImageView iconAddresses = ViewBindings.findChildViewById(rootView, id);
      if (iconAddresses == null) {
        break missingId;
      }

      id = R.id.iconCheck;
      ImageView iconCheck = ViewBindings.findChildViewById(rootView, id);
      if (iconCheck == null) {
        break missingId;
      }

      id = R.id.iconCities;
      ImageView iconCities = ViewBindings.findChildViewById(rootView, id);
      if (iconCities == null) {
        break missingId;
      }

      id = R.id.iconCurrentLocation;
      ImageView iconCurrentLocation = ViewBindings.findChildViewById(rootView, id);
      if (iconCurrentLocation == null) {
        break missingId;
      }

      id = R.id.iconHome;
      ImageView iconHome = ViewBindings.findChildViewById(rootView, id);
      if (iconHome == null) {
        break missingId;
      }

      id = R.id.selectedAddressContainer;
      ConstraintLayout selectedAddressContainer = ViewBindings.findChildViewById(rootView, id);
      if (selectedAddressContainer == null) {
        break missingId;
      }

      id = R.id.tvCityName;
      TextView tvCityName = ViewBindings.findChildViewById(rootView, id);
      if (tvCityName == null) {
        break missingId;
      }

      id = R.id.tvCoordinates;
      TextView tvCoordinates = ViewBindings.findChildViewById(rootView, id);
      if (tvCoordinates == null) {
        break missingId;
      }

      id = R.id.tvLocation;
      TextView tvLocation = ViewBindings.findChildViewById(rootView, id);
      if (tvLocation == null) {
        break missingId;
      }

      return new FragmentLocationBottomSheetBinding((ConstraintLayout) rootView, btnAddNewAddress,
          btnBrowseAllCities, btnClose, btnMyAddresses, btnUseCurrentLocation, handle, iconAdd,
          iconAddresses, iconCheck, iconCities, iconCurrentLocation, iconHome,
          selectedAddressContainer, tvCityName, tvCoordinates, tvLocation);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
